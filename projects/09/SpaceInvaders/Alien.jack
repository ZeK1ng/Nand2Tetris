class Alien{
    field int x ;
    field int y;
    field boolean isAlive;
    field int direction; //1 is right 2 is 0
    
    constructor Alien new(int start_x,int start_y){
        let x=start_x;
        let y=start_y;
        let isAlive =true;
        do draw();
        return this;

    }
    method int getX(){
        return x;
    }
    method int getY(){
        return y;
    }
   
    method void drawLost(){
        var int memAddress;
        let memAddress = 16384 + 100+100;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 5904);
        do Memory.poke(memAddress + 160, 5392);
        do Memory.poke(memAddress + 192, 5392);
        do Memory.poke(memAddress + 224, 5392);
        do Memory.poke(memAddress + 256, 5392);
        do Memory.poke(memAddress + 288, 30576);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }
   
    method void move() {
        if (x < 510) {
            do erase();
            let x = x + 2;
            do draw();
        }else{
            do erase();
            let x = 0;
            let y = y+10;
            do draw();
            if(y >230){
                do drawLost();
                do Sys.Halt();
            }
        }
        return;
    }
   method void kill() {
        let isAlive = false;
        do erase();
        return;
    }
    method boolean getStatus(){
        return isAlive;
    }
    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
	    do Memory.poke(memAddress+0, 32256);
        do Memory.poke(memAddress+32, -1280);
        do Memory.poke(memAddress+64, -256);
        do Memory.poke(memAddress+96, -256);
        do Memory.poke(memAddress+128, 3840);
        do Memory.poke(memAddress+160, 32512);
        do Memory.poke(memAddress+192, 3968);
        do Memory.poke(memAddress+224, 4033);
        do Memory.poke(memAddress+256, 32739);
        do Memory.poke(memAddress+288, 20479);
        do Memory.poke(memAddress+320, 4094);
        do Memory.poke(memAddress+352, 2044);
        do Memory.poke(memAddress+384, 504);
        do Memory.poke(memAddress+416, 176);
        do Memory.poke(memAddress+448, 144);
        do Memory.poke(memAddress+480, 432);
	    return;
    }
    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (x/16) + (y*32);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

     method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    
}


   
