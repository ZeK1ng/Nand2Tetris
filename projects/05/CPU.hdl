// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

/*
   16bit Instruction:  
    i  x  x  a  c  c  c c c c d d d j j j. 
    15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 
    i-> inst type 0:A , 1:C
    if it is A instruction , the other 15 bits are the value that will be saved in A register
        The A-instruction is used for three different purposes. First, it provides the only
        way to enter a constant into the computer under program control. Second, it sets the
        stage for a subsequent C-instruction designed to manipulate a certain data memory
        location, by first setting A to the address of that location. Third, it sets the stage for
        a subsequent C-instruction that specifies a jump, by first loading the address of the
        jump destination to the A register.
    i = 1 -> C instruction
    The C instruction answers 3 questions :what to compute , where to store the result, what to do next
    dest = comp;jump 
    a c1,c2,c3,c4,c5,c6 =comp ;  7 bits that determine which computation should take place
    d1 d2 d3 = destionation;
    j1 j2 j3 = jump

*/
    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);
    // Put your code here:
    Not(in=instruction[15], out=intrA);
    Mux16(a=outAlu, b=instruction, sel=intrA, out=MuxOut);
    Or(a=intrA, b=instruction[5], out=loadA);
    ARegister(in=MuxOut, load=loadA, out=AROut, out[0..14]=addressM);

    /*
        C instruction 

        0-2 jump bits
        3-5 destinations
        6-11 control bits
    */
    And(a=instruction[15], b=instruction[12], out=ArMsel);
    Mux16(a=AROut, b=inM, sel=ArMsel, out=ArM);
    And(a=instruction[15],b=instruction[4],out=loadD);
    DRegister(in=outAlu, load=loadD, out=DRout);

    ALU(x=DRout, y=ArM, zx=instruction[11], nx=instruction[10], zy=instruction[9],
                 ny=instruction[8], f=instruction[7], no=instruction[6],
                  out=outM,out=outAlu, zr=zrout, ng=ngout);

    Not(in=ngout, out=ntng);
    Not(in=zrout, out=ntzr);
    //cmp jgt jump
    And(a=instruction[0], b=instruction[15], out=jgt);
    And(a=ntng, b=ntzr, out=indnzr);
    And(a=indnzr, b=jgt, out=o1);
    //cmp jeq jump
    And(a=instruction[1], b=instruction[15], out=jeq);
    And(a=zrout,b=jeq,out = o2);
    //cmp jlt jump
    And(a=instruction[2], b=instruction[15], out=jlt);
    And(a=ngout, b=jlt, out=o3);

    Or(a=o1, b=o2, out=out1);
    Or(a=o3, b=out1, out=oout);
    //load program counter
    PC(in=AROut, load=oout, inc=true, reset=reset, out[0..14]=pc);
}   