// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyboard_;
    /** Initializes the keyboard. */
    function void init() {
        let keyboard_ = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(keyboard_);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char ch,currKey;
        let currKey = 0;
        while( currKey= 0){
            let currKey = Keyboard.keyPressed();
        }
        let ch = currKey;
        while(~(currKey = 0)){
            let currKey = Keyboard.keyPressed();
        }
        do Output.printChar(ch);
        return ch;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String res;
        var char ch;
        do Output.printString(message);
        let res = String.new(70);
        let ch = Keyboard.readChar();
        while(~(ch = String.newLine())){
            if(~(ch = String.backSpace())){
                do res.appendChar(ch);
            }else{
                if(res.length() > 0){
                    do res.eraseLastChar();
                }
            }
            let ch = Keyboard.readChar();
        }
        return res;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String input;
        let input = Keyboard.readLine(message);
        return input.intValue();
    }
}
