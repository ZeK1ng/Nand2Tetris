// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int str,alloc_len,loglen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0){
            do Sys.error(6);
        }
        if(maxLength = 0){
            let str = 0;
        }else{
            let str = Memory.alloc(maxLength);
        }
        let loglen = 0;
        let alloc_len = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.alloc(str);
        return;    
    }


    /** Returns the current length of this string. */
    method int length() {
        return loglen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < 0 | j> loglen){
            do Sys.error(5);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < 0 | j> loglen){
            do Sys.erro(5);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(loglen = alloc_len){
            do Sys.erro(4);
        }
        let str[loglen] = c;
        let loglen = loglen +1 ;
         return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(loglen = 0){
            do Sys.erro(3);
        }
        let loglen = loglen -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ind , val,neg;
        let val = 0;
        let ind = 0;
        let neg = 0;
        if(str[0] = 45){// -
            let ind = 1;
            let neg =1;
        } 
        while(ind<loglen){
            let val = val*10 + (str[ind] - 48);
            let ind = ind +1;
        }
        if(neg = 1){
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if(val < 0){
            let str[0] = 45;
            let loglen =1;
            do helper(-val);
        }else{
            let loglen = 0 ;
            do helper(val);
        }
        return;
    }
    method void helper(int val){
        var int ch , mod;
        let mod = val - (10*(val/10));
        let ch = mod + 48;
        if(val > 10){
            do helper(val/10);
        }
        do appendChar(ch);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
