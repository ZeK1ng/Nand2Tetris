// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int heapStart;
    static int heapEnd;
    static int heapSize;
    static Array heap;
    static Arry freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapStart = 2048;// heap base
        let heapEnd = 16384;
        let heapSize = heapEnd - heapStart;
        let heap = heapStart;
        let freeList = 2048;
        let freeList[0] = null;
        let freeList[1] = heapSize;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array allocBlock;
        var int res;
        let allocBlock = Memory.findFree(size +2);
        let allocBlock[1] = allocBlock[1] - size -2;
        let res = allocBlock[1];
        let allocBlock[res] = null;
        let allocBlock[res+1] = size;
        return res+2;


    }
    function Array findFree(int size){
        var Array currBlock;//bestBlock;
        // var int bestSize;
        // let bestSize = heapSize;
        // let currBlock = freeList;
        // while(~(currBlock = null)){
        //     if(currBlock[1]>size ){
        //         if(currBlock[1] < bestSize){
        //             let bestSize = currBlock[1];
        //             let bestBlock = currBlock;
        //         }
        //     }
        //     let currBlock=currBlock[0];
        // }
        /*I don`t get why the upper , best fit code , doesn`t work ???:(*/
        let currBlock = freeList;
        while(currBlock[1]  < size){
            if(~(currBlock[0] = null)){
                let currBlock= currBlock[0];
            }
        }
        return currBlock;

    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array curr;
        let curr = freeList;
        while(~(curr = null)){
            let curr = curr[0];
        }
        let curr[0] = o;
        return;
    }
}
